<!-- Main Content -->
<div class="container mx-auto p-4">
    <div class="flex justify-between items-center mb-4">
        <!-- Botón de Regresar a Canales -->
        <button class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 dark:bg-red-600 dark:hover:bg-red-700 mr-2" onclick="goBackToStations()">Regresar a Estaciones</button>
        
        <h1 id="program-title" class="text-2xl font-semibold text-gray-900 dark:text-white">Lista de Programas</h1>
        
        <!-- Botón de Agregar Programa -->
        <button class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 dark:bg-blue-600 dark:hover:bg-blue-700" onclick="openAddDrawer()">Agregar Programa</button>
    </div>
    <!-- Contenedor con scroll horizontal -->
    <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead style="background-color: #8f3542;">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white dark:text-white uppercase tracking-wider">#</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white dark:text-white uppercase tracking-wider">Titulo del programa</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white dark:text-white uppercase tracking-wider">Descripcion</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white dark:text-white uppercase tracking-wider">Acciones</th>
                </tr>            
            </thead>
            <tbody id="programs-table-body" class="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700" style="background-color: #8f3542;">
                <!-- Rows will be dynamically added here -->
            </tbody>
        </table>
    </div>
    <div class="flex justify-between items-center mt-4">
        <button onclick="changePage(-1)" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600" id="prev-page" disabled>
            Anterior
        </button>
        <span id="results-count" class="text-gray-900 dark:text-white"></span>
        <button onclick="changePage(1)" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600" id="next-page">
            Siguiente
        </button>
    </div>
</div>


    <!-- Drawer for Adding Programs -->
    <div id="program-add-drawer" class="fixed inset-0 z-50 overflow-y-auto bg-gray-900 bg-opacity-50 dark:bg-opacity-80 hidden">
        <div class="relative w-full h-full max-w-lg p-4 mx-auto" style="background-color: #330b11;">
            <button type="button" class="absolute top-2 right-2 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-700 dark:hover:text-white" aria-label="Close" onclick="closeAddDrawer()">
                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M6.293 4.293a1 1 0 011.414 0L10 5.586l2.293-1.293a1 1 111.414 1.414L11.414 7l2.293 2.293a1 1 01-1.414 1.414L10 8.414l-2.293 2.293a1 1 01-1.414-1.414L8.586 7 6.293 4.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
            </button>
            <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Agregar Programa</h2>
            <form id="add-program-form" class="mt-4" enctype="multipart/form-data" onsubmit="return submitAddForm()">
                
                <input type="hidden" id="station-id" name="id_station">

                <div class="mb-4">
                    <label for="new-program-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nombre Programa</label>
                    <input type="text" id="new-program-name" name="ProgramTitle" class="mt-1 block w-full p-2 border border-gray-300 rounded-lg dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 focus:ring-primary-500 focus:border-primary-500" placeholder="Nombre del Programa" required>
                </div>
                <div class="mb-4">
                    <label for="new-program-description" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Descripcion</label>
                    <input type="text" id="new-program-description" name="Description" class="mt-1 block w-full p-2 border border-gray-300 rounded-lg dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 focus:ring-primary-500 focus:border-primary-500" placeholder="Descripcion del programa" required>
                </div>               
                
                <div class="flex justify-end">
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 dark:bg-blue-600 dark:hover:bg-blue-700">Agregar</button>
                    <button type="button" class="ml-4 px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600" onclick="closeAddDrawer()">Cancelar</button>
                </div>
            </form>
        </div>
    </div>
    
<!-- Drawer for Updating Program -->
<div id="program-update-drawer" class="fixed inset-0 z-50 overflow-y-auto bg-gray-900 bg-opacity-50 dark:bg-opacity-80 hidden">
    <div class="relative w-full h-full max-w-lg p-4 mx-auto" style="background-color: #330b11;">
        <button type="button" class="absolute top-2 right-2 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-700 dark:hover:text-white" aria-label="Close" onclick="closeUpdateDrawer()">
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M6.293 4.293a1 1 0 011.414 0L10 5.586l2.293-1.293a1 1 111.414 1.414L11.414 7l2.293 2.293a1 1 01-1.414 1.414L10 8.414l-2.293 2.293a1 1 01-1.414-1.414L8.586 7 6.293 4.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
        </button>
        <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Actualizar Programa</h2>
        <form id="update-program-form" class="mt-4">
            <!-- Hidden field for the program ID -->
            <input type="hidden" id="station-id-update" name="id_station">
            <input type="hidden" id="program-id" name="id_program">

            <div class="mb-4">
                <label for="program-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nombre Programa</label>
                <input type="text" id="program-name" name="ProgramTitle" class="mt-1 block w-full p-2 border border-gray-300 rounded-lg dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 focus:ring-primary-500 focus:border-primary-500" placeholder="Nombre del programa">
            </div>
            <div class="mb-4">
                <label for="program-description" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Descripcion</label>
                <input type="text" id="program-description" name="Description" class="mt-1 block w-full p-2 border border-gray-300 rounded-lg dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 focus:ring-primary-500 focus:border-primary-500" placeholder="Descripcion del programa">
            </div>
            <div class="flex justify-end">
                <button type="button" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 dark:bg-blue-600 dark:hover:bg-blue-700" onclick="submitUpdateForm()">Guardar Cambios</button>
                <button type="button" class="ml-4 px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600" onclick="closeUpdateDrawer()">Cancelar</button>
            </div>
        </form>
    </div>
</div>

<script>

let programs = JSON.parse('<%- JSON.stringify(programs) %>');
let id_station = JSON.parse('<%- JSON.stringify(id_station) %>');
let currentPage = 1;
const itemsPerPage = 10;
console.log(programs);

document.getElementById('station-id').value = id_station; 

function loadTableData() {
    console.log(programs);
    const tableBody = document.getElementById('programs-table-body');
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = Math.min(startIndex + itemsPerPage, programs.length);

    for (let i = startIndex; i < endIndex; i++) {
        const program = programs[i];
        const row = document.createElement('tr');
        console.log(program.ProgramTitle);
        row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">${program.id_program}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-white text-white">${program.ProgramTitle}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-white text-white">${program.Description}</td>

            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium flex">
                <button class="text-blue-600 hover:text-blue-900 dark:text-blue-500 dark:hover:text-blue-400 mr-2" onclick="openUpdateDrawer(${program.id_program})">Editar</button>
                <button class="text-green-600 hover:text-blue-900 dark:text-green-500 dark:hover:text-green-400 mr-2" onclick="goToSchedule(${program.id_program},'${program.ProgramTitle}')">Horarios</button>
                <button class="text-red-600 hover:text-red-900 dark:text-red-500 dark:hover:text-red-400" onclick="confirmDeleteProgram(${program.id_program})">Eliminar</button>
            </td>

           
        `;
        tableBody.appendChild(row);
    }
// Update pagination controls
    document.getElementById('prev-page').disabled = currentPage === 1;
    document.getElementById('next-page').disabled = endIndex >= programs.length;
    document.getElementById('results-count').innerText = `Mostrando ${startIndex + 1}-${Math.min(currentPage * itemsPerPage, programs.length)} de ${programs.length} resultados`;
}

function submitAddForm() {
    const form = document.getElementById('add-program-form');
    const formData = new FormData(form);
    const addButton = form.querySelector('button[type="submit"]');

    // Bloquear el botón y dar feedback visual
    addButton.disabled = true;
    addButton.textContent = "Agregando...";

    fetch('<%= server_url %>/api/programs-station', {
        method: 'POST',
        body: formData,
    })
    .then(response => response.json())
    .then(data => {
        console.log('Success:', data);
        closeAddDrawer();
        loadTableData();
        fetchPrograms();
        form.reset();
        // Aquí NO reactivamos el botón para evitar doble alta
        addButton.disabled = false;
        addButton.textContent = "Agregar";
    })
    .catch((error) => {
        console.error('Error:', error);
        // Reactivar solo si hay error
        addButton.disabled = false;
        addButton.textContent = "Agregar";
    });

    return false; // Evita recarga de página
}

function submitUpdateForm() {
    const form = document.getElementById('update-program-form');
    const formData = new FormData(form); // Crea un objeto FormData con el formulario

    fetch('<%= server_url %>/api/update-programs-stations', {
        method: 'POST',
        body: formData, // Adjunta los datos del formulario 
    })
    .then(response => response.json())
    .then(data => {
        console.log('Success:', data);
        // Maneja la respuesta del servidor (ej. muestra un mensaje de éxito o redirige)
        closeUpdateDrawer(); // Cierra el formulario después de enviar
        fetchPrograms();

    })
    .catch((error) => {
        console.error('Error:', error);
        // Maneja el error (ej. muestra un mensaje de error)
    });
}



function fetchPrograms() {
    fetch(`<%= server_url %>/api/programs-stations/${id_station}`)
        .then(response => response.json())
        .then(data => {
            const tableBody = document.getElementById('programs-table-body');
            tableBody.innerHTML = ''; // Limpiar el contenido actual          
            data.forEach((program, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">${program.id_program}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-white text-white">${program.ProgramTitle}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-white text-white">${program.Description}</td>

                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium flex">
                        <button class="text-blue-600 hover:text-blue-900 dark:text-blue-500 dark:hover:text-blue-400 mr-2" onclick="openUpdateDrawer(${program.id_program})">Editar</button>
                        <button class="text-green-600 hover:text-green-900 dark:text-green-500 dark:hover:text-green-400 mr-2" onclick="goToSchedule(${program.id_program},'${program.ProgramTitle}')">Horarios</button>
                        <button class="text-red-600 hover:text-red-900 dark:text-red-500 dark:hover:text-red-400" onclick="confirmDeleteProgram(${program.id_program})">Eliminar</button>
            </td>
                `;
                console.log("TABLA ACTUALIZADA");
                tableBody.appendChild(row);
                programs = data;
            });
        })
        .catch(error => console.error('Error fetching programs:', error));
}


function confirmDeleteProgram(id) {
    if (confirm('¿Estás seguro de que deseas eliminar este canal?')) {
        fetch(`<%= server_url %>/api/programs/${id}`, {
            method: 'DELETE',
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Error al eliminar el programa');
            }

            return response.json();
        })
        .then(data => {
            console.log('Canal eliminado:', data);
            // Aquí puedes agregar lógica para actualizar la interfaz, como eliminar la estación de la lista en la página
            fetchPrograms();
            alert('Programa eliminado exitosamente.');
 
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Ocurrió un error al eliminar el programa.');
        });
    }
}

function openAddDrawer() {
    document.getElementById('station-id').value = id_station;
    document.getElementById('program-add-drawer').classList.remove('hidden');

}

function closeAddDrawer() {
    document.getElementById('program-add-drawer').classList.add('hidden');
}

function changePage(direction) {
    currentPage += direction;
    loadTableData();    
}

function openUpdateDrawer(id) {
    console.log(id_station);
    const program = programs.find(s => s.id_program === id);
    console.log(program);
        document.getElementById('program-id').value=id;
        document.getElementById('station-id-update').value = id_station;   
        document.getElementById('program-name').value = program.ProgramTitle;
        document.getElementById('program-description').value = program.Description;
        document.getElementById('update-program-form').dataset.id = id;
        document.getElementById('program-update-drawer').classList.remove('hidden');   
}

function closeUpdateDrawer(){
    document.getElementById('program-update-drawer').classList.add('hidden');

}

function goToSchedule(id_program,ProgramTitle) {
    const encodedProgramTitle = encodeURIComponent(ProgramTitle); // Codifica el nombre para URLs
    window.location.href = `/crud/schedules/${id_program}?ProgramTitle=${encodedProgramTitle}`;
}

// Obtén el nombre del canal desde el parámetro de la URL
const urlParams = new URLSearchParams(window.location.search);
const nombreStation = urlParams.get('nombreStation');

// Decodifica el nombre del canal y actualiza el título
if (nombreStation) {
    const decodednombreStation = decodeURIComponent(nombreStation);
    document.getElementById('program-title').textContent = `Lista de Programas: ${decodednombreStation}`;
}

function goBackToStations(){
    window.location.href = '/crud/radio-stations';

}


// Initial load
loadTableData();

</script>
