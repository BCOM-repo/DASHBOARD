<!-- Main Content -->
<div class="container mx-auto p-4">
    <div class="flex justify-between items-center mb-4">
        <!-- Botón de Regresar a Canales -->
        <button class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 dark:bg-red-600 dark:hover:bg-red-700 mr-2" onclick="goBackToPrograms()">Regresar a Programas</button>
        <h1 id="id-title" class="text-2xl font-semibold text-gray-900 dark:text-white">Lista de Horarios del programa: </h1>
        <button class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 dark:bg-blue-600 dark:hover:bg-blue-700" onclick="openAddDrawer()">Agregar Horario</button>
    </div>
    <div class="overflow-x-auto">
        <table class="min-w-full">
            <thead style="background-color: #8f3542;">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white dark:text-white uppercase tracking-wider">#</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white dark:text-white uppercase tracking-wider">Dia</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white dark:text-white uppercase tracking-wider">Hora Inicio</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-white dark:text-white uppercase tracking-wider">Hora Fin</th>   
                    <th class="px-6 py-3 text-left text-xs font-medium text-white dark:text-white uppercase tracking-wider">Opciones</th>
                </tr>
            </thead>
            <tbody id="schedule-table-body" style="background-color: #8f3542;">
                <!-- Rows will be dynamically added here -->
            </tbody>
        </table>
    </div>
    <div class="flex justify-between items-center mt-4">
        <button onclick="changePage(-1)" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600" id="prev-page" disabled>
            Anterior
        </button>
        <span id="results-count" class="text-gray-900 dark:text-white"></span>
        <button onclick="changePage(1)" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600" id="next-page">
            Siguiente
        </button>
    </div>
</div>

<!-- Drawer for Adding Schedules -->
<div id="schedule-add-drawer" class="fixed inset-0 z-50 overflow-y-auto bg-gray-900 bg-opacity-50 dark:bg-opacity-80 hidden">
    <div class="relative w-full h-full max-w-lg p-4 mx-auto" style="background-color: #330b11;">
        <button type="button" class="absolute top-2 right-2 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-700 dark:hover:text-white" aria-label="Close" onclick="closeAddDrawer()">
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M6.293 4.293a1 1 0 011.414 0L10 5.586l2.293-1.293a1 1 111.414 1.414L11.414 7l2.293 2.293a1 1 01-1.414 1.414L10 8.414l-2.293 2.293a1 1 01-1.414-1.414L8.586 7 6.293 4.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
        </button>
        <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Agregar Horarios</h2>
        
        <!-- Formulario para agregar horarios -->
        <form id="add-schedule-form" class="mt-4" enctype="multipart/form-data" onsubmit="return submitAddForm()">
            <input type="hidden" id="program-id" name="id_program">

            <!-- Selección de Día -->
            <div class="mb-4">
                <label for="day" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Selecciona un día:</label>
                <select id="day-id" name="Day" class="mt-1 block w-full p-2 border border-gray-300 rounded-lg dark:border-gray-600 dark:bg-gray-700 dark:text-white">
                    <option value="1">Lunes</option>
                    <option value="2">Martes</option>
                    <option value="3">Miércoles</option>
                    <option value="4">Jueves</option>
                    <option value="5">Viernes</option>
                    <option value="6">Sábado</option>
                    <option value="7">Domingo</option>
                </select>
            </div>

            <!-- Selección de Hora de Inicio -->
            <div class="mb-4">
                <label for="startTime" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Hora de inicio:</label>
                <input type="time" id="startTime-id" name="StartTime" required class="mt-1 block w-full p-2 border border-gray-300 rounded-lg dark:border-gray-600 dark:bg-gray-700 dark:text-white">
            </div>

            <!-- Selección de Hora de Fin -->
            <div class="mb-4">
                <label for="endTime" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Hora de fin:</label>
                <input type="time" id="endTime-id" name="EndTime" required class="mt-1 block w-full p-2 border border-gray-300 rounded-lg dark:border-gray-600 dark:bg-gray-700 dark:text-white">
            </div>

            <!-- Botones de acción -->
            <div class="mt-6 flex justify-end">
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 dark:bg-blue-600 dark:hover:bg-blue-700">Agregar</button>
                <button type="button" class="ml-4 px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600" onclick="closeAddDrawer()">Cancelar</button>
            </div>
        </form>
    </div>
</div>

<!-- Drawer for Updating Channel -->
<div id="schedule-update-drawer" class="fixed inset-0 z-50 overflow-y-auto bg-gray-900 bg-opacity-50 dark:bg-opacity-80 hidden">
    <div class="relative w-full h-full max-w-lg p-4 mx-auto" style="background-color: #330b11;">
        <button type="button" class="absolute top-2 right-2 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-700 dark:hover:text-white" aria-label="Close" onclick="closeUpdateDrawer()">
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M6.293 4.293a1 1 0 011.414 0L10 5.586l2.293-1.293a1 1 111.414 1.414L11.414 7l2.293 2.293a1 1 01-1.414 1.414L10 8.414l-2.293 2.293a1 1 01-1.414-1.414L8.586 7 6.293 4.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
        </button>
        <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Actualizar Canal</h2>
        <form id="update-schedule-form" class="mt-4">
            <input type="hidden" id="update-schedule-id" name="id_dayschedule">

             <!-- Selección de Día -->
             <div class="mb-4">
                <label for="day" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Selecciona un día:</label>
                <select id="update-day-id" name="Day" class="mt-1 block w-full p-2 border border-gray-300 rounded-lg dark:border-gray-600 dark:bg-gray-700 dark:text-white">
                    <option value="1">Lunes</option>
                    <option value="2">Martes</option>
                    <option value="3">Miércoles</option>
                    <option value="4">Jueves</option>
                    <option value="5">Viernes</option>
                    <option value="6">Sábado</option>
                    <option value="7">Domingo</option>
                </select>
            </div>

            <!-- Selección de Hora de Inicio -->
            <div class="mb-4">
            <label for="startTime" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Hora de inicio:</label>
            <input type="time" id="update-startTime-id" name="StartTime" required class="mt-1 block w-full p-2 border border-gray-300 rounded-lg dark:border-gray-600 dark:bg-gray-700 dark:text-white">
            </div>

            <!-- Selección de Hora de Fin -->
            <div class="mb-4">
            <label for="endTime" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Hora de fin:</label>
            <input type="time" id="update-endTime-id" name="EndTime" required class="mt-1 block w-full p-2 border border-gray-300 rounded-lg dark:border-gray-600 dark:bg-gray-700 dark:text-white">
            </div>
          
            <div class="flex justify-end">
                <button type="button" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 dark:bg-blue-600 dark:hover:bg-blue-700" onclick="submitUpdateForm()">Guardar Cambios</button>
                <button type="button" class="ml-4 px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600" onclick="closeUpdateDrawer()">Cancelar</button>
            </div>
        </form>
    </div>
</div>




<script>
let id_program = JSON.parse('<%- JSON.stringify(id_program) %>');
let schedules = JSON.parse('<%- JSON.stringify(schedules) %>');
let currentPage = 1;
const itemsPerPage = 10;
const daysOfWeek = {
        1: 'Lunes',
        2: 'Martes',
        3: 'Miércoles',
        4: 'Jueves',
        5: 'Viernes',
        6: 'Sábado',
        7: 'Domingo'
        };


document.getElementById('program-id').value=id_program;

function openAddDrawer(){
document.getElementById('schedule-add-drawer').classList.remove('hidden');
}

function closeAddDrawer(){
    document.getElementById('schedule-add-drawer').classList.add('hidden');

}

function loadTableData() {
    const tableBody = document.getElementById('schedule-table-body');
    tableBody.innerHTML = ''; // Clear the table
   
 

    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = Math.min(startIndex + itemsPerPage, schedules.length);
    

    for (let i = startIndex; i < endIndex; i++) {
        const schedule = schedules[i];
        const row = document.createElement('tr');
        const dayName = daysOfWeek[schedule.Day] || 'Día inválido'; // If the day number is invalid, display a fallback text

        row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">${schedule.id_dayschedule}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-white text-white">${dayName}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-white text-white">${schedule.StartTime}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-white text-white">${schedule.EndTime}</td>          
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium flex">
                <button class="text-blue-600 hover:text-blue-900 dark:text-blue-500 dark:hover:text-blue-400 mr-2" onclick="openUpdateDrawer(${schedule.id_dayschedule})">Editar</button>
                <button class="text-red-600 hover:text-red-900 dark:text-red-500 dark:hover:text-red-400" onclick="confirmDeleteSchedule(${schedule.id_dayschedule})">Eliminar</button>
            </td>

           
        `;
        tableBody.appendChild(row);
    }
     // Update pagination controls
    document.getElementById('prev-page').disabled = currentPage === 1;
    document.getElementById('next-page').disabled = endIndex >= schedules.length;
    document.getElementById('results-count').innerText = `Mostrando ${startIndex + 1}-${Math.min(currentPage * itemsPerPage, schedules.length)} de ${schedules.length} resultados`;
}

function openUpdateDrawer(id) {
        
        const schedule = schedules.find(schedule => schedule.id_dayschedule === id); // Encuentra el horario correspondiente
        console.log(schedule);      
        document.getElementById('update-schedule-id').value = id;
        document.getElementById('update-day-id').value = schedule.Day;
        document.getElementById('update-startTime-id').value = schedule.StartTime;
        document.getElementById('update-endTime-id').value = schedule.EndTime;
        document.getElementById('update-schedule-form').dataset.id = id;
        document.getElementById('schedule-update-drawer').classList.remove('hidden'); // Muestra el drawer
}




function submitAddForm() {
    const form = document.getElementById('add-schedule-form');
    const formData = new FormData(form); // Crea un objeto FormData con el formulario
    const addButton = form.querySelector('button[type="submit"]');

    // Bloquear botón y dar feedback visual
    addButton.disabled = true;
    addButton.textContent = "Agregando...";

    fetch('<%= server_url %>/api/day-schedule', {
        method: 'POST',
        body: formData, // Adjunta los datos del formulario incluyendo los archivos
    })
    .then(response => response.json())
    .then(data => {
        console.log('Success:', data);
        // Maneja la respuesta del servidor (ej. muestra un mensaje de éxito o redirige)
        closeAddDrawer(); // Cierra el formulario después de enviar
        loadTableData();
        fetchSchedule();
        // Restaurar botón si lo necesitas
        addButton.disabled = false;
        addButton.textContent = "Agregar";
    })
    .catch((error) => {
        console.error('Error:', error);
        // Maneja el error (ej. muestra un mensaje de error)
        // Restaurar botón si lo necesitas
        addButton.disabled = false;
        addButton.textContent = "Agregar";

    });

    return false; // Evita el envío predeterminado del formulario

}

function fetchSchedule(){
    fetch(`<%= server_url %>/api/program-schedules/${id_program}`)
        .then(response => response.json())
        .then(data => {
            const tableBody = document.getElementById('schedule-table-body');
            tableBody.innerHTML = ''; // Limpiar el contenido actual          
            data.forEach((schedule, index) => {
                const row = document.createElement('tr');
                const dayName = daysOfWeek[schedule.Day] || 'Día inválido'; // If the day number is invalid, display a fallback text
                row.innerHTML = `
    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">${schedule.id_dayschedule}</td>
    <td class="px-6 py-4 whitespace-nowrap text-sm text-white">${dayName}</td>
    <td class="px-6 py-4 whitespace-nowrap text-sm text-white">${schedule.StartTime}</td>
    <td class="px-6 py-4 whitespace-nowrap text-sm text-white">${schedule.EndTime}</td>
    
    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium flex">
        <button class="text-blue-600 hover:text-blue-900 dark:text-blue-500 dark:hover:text-blue-400 mr-2" onclick="openUpdateDrawer(${schedule.id_dayschedule})">Editar</button>
        <button class="text-red-600 hover:text-red-900 dark:text-red-500 dark:hover:text-red-400" onclick="confirmDeleteSchedule(${schedule.id_dayschedule})">Eliminar</button>
    </td>
`;

                console.log("TABLA ACTUALIZADA");
                tableBody.appendChild(row);
                programs = data;
            });
        })
        .catch(error => console.error('Error fetching schedules:', error));

}

function confirmDeleteSchedule(id){
    if (confirm('¿Estás seguro de que deseas eliminar este horario?')) {
        fetch(`<%= server_url %>/api/delete-PDS/${id}`, {
            method: 'DELETE',
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Error al eliminar el horario');
            }

            loadTableData();
            return response.json();
        })
        .then(data => {
            console.log('Canal eliminado:', data);
            // Aquí puedes agregar lógica para actualizar la interfaz, como eliminar la estación de la lista en la página
            alert('Programa eliminado exitosamente.');
            fetchSchedule();
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Ocurrió un error al eliminar el programa.');
        });
    }

}

function submitUpdateForm(){
    const form = document.getElementById('update-schedule-form');
    const formData = new FormData(form); // Crea un objeto FormData con el formulario

    fetch('<%= server_url %>/api/update-schedule', {
        method: 'POST',
        body: formData, // Adjunta los datos del formulario 
    })
    .then(response => response.json())
    .then(data => {
        console.log('Success:', data);
        // Maneja la respuesta del servidor (ej. muestra un mensaje de éxito o redirige)
        closeUpdateDrawer(); // Cierra el formulario después de enviar
        fetchSchedule();

    })
    .catch((error) => {
        console.error('Error:', error);
        // Maneja el error (ej. muestra un mensaje de error)
    });

}

function closeUpdateDrawer(){
    document.getElementById('schedule-update-drawer').classList.add('hidden');

}

// Obtén el nombre del canal desde el parámetro de la URL
const urlParams = new URLSearchParams(window.location.search);
const ProgramTitle = urlParams.get('ProgramTitle');

// Decodifica el nombre del canal y actualiza el título
if (ProgramTitle) {
    const decodedProgramTitle = decodeURIComponent(ProgramTitle);
    document.getElementById('id-title').textContent = `Horarios del programa: ${decodedProgramTitle}`;
}

function goBackToPrograms(){
    window.history.back();
}

// Initial load
loadTableData();
</script>
